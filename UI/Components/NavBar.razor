@using IoC.Constants
@using System.Globalization
@using Microsoft.Extensions.Localization
@using UI.FormEntities
@using UI.Services
@inject IStorageService LocalStorageService
@inject NavigationManager NavManager
@inject UserAuthorizationHelpService UserAuthorizationHelpService
@inject LocalizationService LocalizationService
@inject IStringLocalizer<Localizations.Localization> Localization
@inject IDialogService DialogService

<div class="top-row ps-3 navbar navbar-dark" style="background-color: darkblue">
    <div class="container-fluid">
        <a class="navbar-brand" href="">HMS</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass z-10" style="background-color: darkblue">
    <MudPaper Class="d-flex flex-column align-content-center ma-2 gap-2" Elevation="0" Style="background-color: transparent">
        <Localization/>
        <MudButton Variant="Variant.Outlined" @onclick="navigateToMainPage" FullWidth="true" Style="background-color: aliceblue">
            @Localization["NavBarComponent_MainPage"]
        </MudButton>
        <MudButton Variant="Variant.Outlined" @onclick="navigateToSubscriptionPage" FullWidth="true" Style="background-color: aliceblue">
            @Localization["NavBarComponent_SubscriptionPage"]
        </MudButton>
        <MudButton Variant="Variant.Outlined" @onclick="navigateToMapPage" FullWidth="true" Style="background-color: aliceblue">
            @Localization["NavBarComponent_Map"]
        </MudButton>

        @if (UserAuthorizationHelpService.IsUserAuthenticated ?? false)
        {
            <MudButton Variant="Variant.Outlined" @onclick="navigateToHomePage" FullWidth="true" Style="background-color: aliceblue">
                @Localization["NavBarComponent_Home"]
            </MudButton>
            <MudButton Variant="Variant.Outlined" @onclick="navigateToBookingHistoryPage" FullWidth="true" Style="background-color: aliceblue">
                @Localization["NavBarComponent_navigateToBookingHistory"]
            </MudButton>
            <MudButton Variant="Variant.Outlined" @onclick="navigateToPaymentHistoryPage" FullWidth="true" Style="background-color: aliceblue">
                @Localization["NavBarComponent_PaymentHistory"]
            </MudButton>
            <MudButton Variant="Variant.Outlined" @onclick="navigateToProfilePage" FullWidth="true" Style="background-color: aliceblue">
                @Localization["NavBarComponent_Profile"]
            </MudButton>
            <MudButton Variant="Variant.Outlined" @onclick="logout" FullWidth="true" Style="background-color: aliceblue">
                @Localization["NavBarComponent_Logout"]
            </MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Outlined" @onclick="navigateToAuthorizationPage" FullWidth="true" Style="background-color: aliceblue">
                @Localization["NavBarComponent_Authorization"]
            </MudButton>
        }
        <MudButton Variant="Variant.Outlined" @onclick="clearCache" FullWidth="true" Style="background-color: aliceblue">
            @Localization["NavBarComponent_ClearCache"]
        </MudButton>

    </MudPaper>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task clearCache()
    {
        try
        {
            var token = await LocalStorageService.GetAsync<string>(SavedDataSections.Token);
            LocalStorageService.ClearStorage();
            await LocalStorageService.SetAsync(SavedDataSections.Token, token);

            var parameters = new DialogParameters();
            var options = new DialogOptions { CloseOnEscapeKey = true };
            parameters.Add("Message", Localization["ClearCache_Message"].Value);

            await (await DialogService.ShowAsync<MessageDialog>(
                Localization["MessageComponent_DialogTitle"],
                parameters, options)).Result;
        }
        catch (Exception e)
        {
            var parameters = new DialogParameters();
            var options = new DialogOptions { CloseOnEscapeKey = true };
            parameters.Add("Error", e.Message);

            await (await DialogService.ShowAsync<ErrorDialog>(
                Localization["GlobalErrorHandling_ErrorDialog_Title"],
                parameters, options)).Result;
        }
    }

    private async Task logout()
    {
        try
        {
            UserAuthorizationHelpService.Logout();
            LocalStorageService.ClearStorage();
            NavManager.NavigateTo(PageNavigateConstants.IndexPage);
        }
        catch (Exception e)
        {
            var parameters = new DialogParameters();
            var options = new DialogOptions { CloseOnEscapeKey = true };
            parameters.Add("Error", e.Message);

            await (await DialogService.ShowAsync<ErrorDialog>(
                Localization["GlobalErrorHandling_ErrorDialog_Title"],
                parameters, options)).Result;
        }
    }

    private void navigateToBookingHistoryPage() =>
        NavManager.NavigateTo(
            string.Format("{0}/{1}",
                PageNavigateConstants.BookingHistoryPage,
                (int)BookingHistoryPageType.OwnBookings));

    private void navigateToMainPage() => NavManager.NavigateTo(PageNavigateConstants.IndexPage);

    private void navigateToSubscriptionPage() => NavManager.NavigateTo(PageNavigateConstants.SubscriptionPage);

    private void navigateToProfilePage() => NavManager.NavigateTo(PageNavigateConstants.ProfilePage);

    private void navigateToMapPage() => NavManager.NavigateTo(PageNavigateConstants.MapPage);

    private void navigateToHomePage() => NavManager.NavigateTo(PageNavigateConstants.HomePage);

    private void navigateToPaymentHistoryPage() => NavManager.NavigateTo(PageNavigateConstants.PaymentHistoryPage);

    private void navigateToAuthorizationPage() => NavManager.NavigateTo(PageNavigateConstants.AuthorizationPage);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var culture = LocalizationService.GetCulture();
            CultureInfo.DefaultThreadCurrentUICulture = culture;
            CultureInfo.DefaultThreadCurrentCulture = culture;
            LocalizationService.CultureChanged += UpdateLocalization;

            if (UserAuthorizationHelpService.IsUserAuthenticated == null)
            {
                await UserAuthorizationHelpService.IsCredentialsRight();
                StateHasChanged();
            }
            UserAuthorizationHelpService.AuthenticationStateChanged += UpdateNavbar;
        }
        catch (Exception e)
        {
            var parameters = new DialogParameters();
            var options = new DialogOptions { CloseOnEscapeKey = true };
            parameters.Add("Error", e.Message);

            await (await DialogService.ShowAsync<ErrorDialog>(
                Localization["GlobalErrorHandling_ErrorDialog_Title"],
                parameters, options)).Result;
        }
    }

    private void UpdateNavbar()
    {
        StateHasChanged();
    }

    private void UpdateLocalization()
    {
        var culture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = culture;
        CultureInfo.DefaultThreadCurrentCulture = culture;
        StateHasChanged();
    }

}