@page "/Map"
@using Domain.Dtos
@using System.Text
@using System.Globalization
@using System.Net.Http.Json
@using IoC.Constants
@using Microsoft.Extensions.Localization
@using UI.Services

@inject IJSRuntime JSRuntime
@inject LocalizationService LocalizationService
@inject IStringLocalizer<Localizations.Localization> Localization
@inject NavigationManager NavManager
@inject HttpClient Client
@inject IStorageService LocalStorageService
@inject IDialogService DialogService

<MudPaper Class="d-flex flex-row flex-wrap flex-grow-1 gap-1 mx-1 pa-0" Elevation="0">
    <MudPaper Class="d-flex flex-column align-content-start gap-1 ma-0 pa-0 w-100" Elevation="0" >
        <MudPaper Style="max-height: 280px;  width: 100%" Elevation="0">
            <MudSelect T="ShipTypeDto" SelectedValuesChanged="() => ShipTypeFilterChange()"
                       @bind-Value="@selectedValue" Clearable="true" 
                       FullWidth="true" Style="width: 100%" Class="w-100"
                       Label="@Localization["MapPage_ShipType_Label"]"
                       Text="@Localization["MapPage_ShipType_Text"]">
                @foreach (var type in _shipTypes)
                {
                    <MudSelectItem T="ShipTypeDto" Class="w-100" Value="@type" Style="width: 100%" >
                        <div class="d-flex flex-column gap-1 ma-0 pa-0 w-100">
                            <MudText Typo="Typo.subtitle1">
                                @Localization["MapPage_TypeName"]:
                                @type.TypeName
                            </MudText>
                            <MudText Typo="Typo.subtitle2">
                                @Localization["MapPage_Description"]:
                                @type.Description
                            </MudText>
                        </div>
                    </MudSelectItem>
                }
            </MudSelect>
        </MudPaper>
        <MudPaper Class="d-flex flex-column gap-1 my-1 mx-0 pa-0 w-100" Elevation="0" MinWidth="100" Height="200"
                  Style="cursor: pointer; overflow-y: auto; max-height: 200px;">
            @foreach (var filteredHarbor in _filteredHarbors)
            {
                <MudPaper Class="d-flex flex-row justify-space-between flex-grow-1 gap-0"
                          Elevation="0" @onclick="() => HarborClick(filteredHarbor)">
                    <MudPaper Class="d-flex flex-column gap-1" Elevation="0">
                        <MudText Typo="@Typo.h6">
                            @filteredHarbor.DisplayName
                        </MudText>
                        <MudText Typo="@Typo.subtitle1">
                            @filteredHarbor.Description
                        </MudText>
                        <MudText Typo="@Typo.subtitle2">
                            @filteredHarbor.SupportEmail
                        </MudText>
                        <MudText Typo="@Typo.subtitle2">
                            @filteredHarbor.SupportPhoneNumber
                        </MudText>
                    </MudPaper>
                    <MudPaper Class="d-flex flex-column align-center gap0" Elevation="0">
                        <MudRating ReadOnly="true" SelectedValue="@((int)(filteredHarbor.AverageRate))"/>
                        <MudText Typo="@Typo.subtitle2">
                            @filteredHarbor.ReviewsAmount
                        </MudText>
                    </MudPaper>
                </MudPaper>
            }
        </MudPaper>
    </MudPaper>
    <div id="map" @ref="mapDiv" class="ma-0 pa-0 h-100 w-100" style="min-height: 600px; min-width: 100px;"/>
</MudPaper>

@code {
    private string Collapse = "";
    private ElementReference mapDiv;
    private double latitude;
    private double longitude;

    private int zoom = 7;
    private ShipTypeDto selectedValue = new ShipTypeDto();

    private List<HarborPreviewDataDto> _harbors = new List<HarborPreviewDataDto>();
    private List<ShipTypeDto> _shipTypes = new List<ShipTypeDto>();

    private List<HarborPreviewDataDto> _filteredHarbors = new List<HarborPreviewDataDto>();

    private async Task HarborClick(HarborPreviewDataDto harbor)
    {
        try
        {
            await JSRuntime.InvokeVoidAsyncIgnoreErrors(
                "zoom",
                7,
                harbor.GeolocationLatitude,
                harbor.GeolocationLongitude);
        }
        catch (Exception e)
        {
            var parameters = new DialogParameters();
            var options = new DialogOptions { CloseOnEscapeKey = true };
            parameters.Add("Error", e.Message);

            await (await DialogService.ShowAsync<ErrorDialog>(
                Localization["GlobalErrorHandling_ErrorDialog_Title"],
                parameters, options)).Result;
        }
        StateHasChanged();
    }

    private async void ShipTypeFilterChange()
    {
        try
        {
            selectedValue ??= new ShipTypeDto();
            
            if (_shipTypes.Any(x => x.Id.Equals(selectedValue.Id)))
            {
                var response = await Client.PostAsJsonAsync(ApiRoutes.Harbor.SuitableHarbors, selectedValue);

                _filteredHarbors = await response.Content.ReadFromJsonAsync<List<HarborPreviewDataDto>>();
            }
            else
            {
                _filteredHarbors = _harbors;
            }

            _filteredHarbors = _filteredHarbors
                .OrderByDescending(x => x.AverageRate)
                .ThenByDescending(x => x.ReviewsAmount)
                .ToList();
        }
        catch (Exception e)
        {
            var parameters = new DialogParameters();
            var options = new DialogOptions { CloseOnEscapeKey = true };
            parameters.Add("Error", e.Message);

            await (await DialogService.ShowAsync<ErrorDialog>(
                Localization["GlobalErrorHandling_ErrorDialog_Title"],
                parameters, options)).Result;
        }

        StateHasChanged();
    }

    private async Task AddMarkerOnMap(HarborPreviewDataDto harbor)
    {
        var markerText = new StringBuilder("");

        markerText.Append(string.Format("<div id=\"content\" onclick=\"window.redirectToPage('{0}/{1}')\" style=\"cursor: pointer\">",
            PageNavigateConstants.HarborPage, harbor.Id));
        markerText.Append("<div id=\"siteNotice\">");
        markerText.Append(String.Format("</div>"));
        markerText.Append(String.Concat("<h1 id=\"firstHeading\" class=\"firstHeading\">", harbor.DisplayName, "</h1>"));
        markerText.Append(String.Concat("<p>", harbor.Description, "</p>"));
        markerText.Append("<div id=\"siteNotice\">");
        markerText.Append("</div>");
        markerText.Append("</div>");

        await JSRuntime.InvokeVoidAsyncIgnoreErrors("addMarker",
            markerText.ToString(),
            harbor.DisplayName,
            harbor.GeolocationLatitude,
            harbor.GeolocationLongitude);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            LocalizationService.CultureChanged += UpdatePage;
            CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
            CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

            _harbors = await LocalStorageService.GetAsync<List<HarborPreviewDataDto>>(SavedDataSections.AllHarborsForMap)
                       ?? new List<HarborPreviewDataDto>();
            
            _shipTypes = await LocalStorageService.GetAsync<List<ShipTypeDto>>(SavedDataSections.ShipTypes) 
                         ?? new List<ShipTypeDto>();

            var response = await Client.GetAsync(ApiRoutes.Harbor.Controller);

            if (response.IsSuccessStatusCode)
            {
                _harbors = await response.Content.ReadFromJsonAsync<List<HarborPreviewDataDto>>();
                await LocalStorageService.SetAsync(SavedDataSections.AllHarborsForMap, _harbors);
            }
            
            _filteredHarbors = _harbors;

            response = await Client.GetAsync(ApiRoutes.ShipType.Controller);

            if (response.IsSuccessStatusCode)
            {
                _shipTypes = await response.Content.ReadFromJsonAsync<List<ShipTypeDto>>();
                await LocalStorageService.SetAsync(SavedDataSections.ShipTypes, _shipTypes);
            }

            await JSRuntime.InvokeVoidAsyncIgnoreErrors(
                "initMap",
                mapDiv,
                zoom,
                Localization["MapPage_CurrentPosition_ButtonLabel"].Value,
                Localization["MapPage_CurrentPosition_InformWindow"].Value);

            foreach (var harbor in _harbors)
            {
                await AddMarkerOnMap(harbor);
            }

            _filteredHarbors = _filteredHarbors
                .OrderByDescending(x => x.AverageRate)
                .ThenByDescending(x => x.ReviewsAmount)
                .ToList();
        }
        catch (Exception e)
        {
            var parameters = new DialogParameters();
            var options = new DialogOptions { CloseOnEscapeKey = true };
            parameters.Add("Error", e.Message);

            await (await DialogService.ShowAsync<ErrorDialog>(
                Localization["GlobalErrorHandling_ErrorDialog_Title"],
                parameters, options)).Result;
        }
        StateHasChanged();
    }

    private async void UpdatePage()
    {
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        await JSRuntime.InvokeVoidAsyncIgnoreErrors(
            "initMap",
            mapDiv,
            zoom,
            Localization["MapPage_CurrentPosition_ButtonLabel"].Value,
            Localization["MapPage_CurrentPosition_InformWindow"].Value);

        foreach (var harbor in _harbors)
        {
            await AddMarkerOnMap(harbor);
        }

        StateHasChanged();
    }

}