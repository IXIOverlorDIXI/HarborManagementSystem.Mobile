@page "/ShipFormPage"
@using UI.Validators.Ship
@using UI.FormEntities
@using System.Globalization
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using IoC.Constants
@using Domain.Dtos
@using Microsoft.Extensions.Localization
@using UI.FormEntities.Ship
@using UI.Services
@inject HttpClient Client
@inject IStorageService LocalStorageService
@inject NavigationManager NavManager
@inject LocalizationService LocalizationService
@inject IStringLocalizer<Localizations.Localization> Localization
@inject ShipValidator ShipValidator
@inject IDialogService DialogService

<MudTabs Elevation="2" Rounded="true" PanelClass="pa-6" Centered="true">
    <MudTabPanel Text="@Localization["ShipFormPage_Title"]">
        <MudGrid>
            <MudItem xs="12" sm="7" Class="mx-auto pa-6">
                @if (_lastCreatedShipId.HasValue)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-2"
                               OnClick="toShipPage">
                        @Localization["ShipFormPage_ToShipPageButton"]
                    </MudButton>
                }
                <MudCard>
                    <MudForm @ref="form" Model="@_shipForm" Validation="@(ShipValidator.ValidateValue)" ValidationDelay="0">
                        <MudCardContent>
                            <MudTextField Label="@Localization["ShipFormPage_DisplayName"]"
                                          HelperText="@Localization["ShipFormPage_DisplayName"]"
                                          Class="mt-3"
                                          @bind-Value="_shipForm.DisplayName" For="@(() => _shipForm.DisplayName)"/>
                            <MudSelect T="Guid" @bind-Value="_shipForm.ShipTypeId" For="() => _shipForm.ShipTypeId"
                                       Label="@Localization["ShipFormPage_ShipType_Label"]"
                                       Text="@Localization["ShipFormPage_ShipType_Text"]">
                                @foreach (var type in _shipTypes)
                                {
                                    <MudSelectItem T="Guid" Value="@type.Id">
                                        <div class="d-flex flex-column gap-1 ma-0 pa-0">
                                            <MudText Typo="Typo.subtitle1">
                                                @Localization["ShipFormPage_TypeName"]:
                                                @type.TypeName
                                            </MudText>
                                            <MudText Typo="Typo.subtitle2">
                                                @Localization["ShipFormPage_Description"]:
                                                @type.Description
                                            </MudText>
                                        </div>
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </MudCardContent>
                    </MudForm>
                    <MudCardActions>
                        @if (_createShipErrorAlertVisibile)
                        {
                            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true"
                                      CloseIconClicked="(() => closeAlert(AlertDestination.CreateShipError))">
                                @Localization["ShipFormPage_ErrorAlert"]:
                                @_createShipError
                            </MudAlert>
                        }
                        @if (_createShipSuccessAlertVisibile)
                        {
                            <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true"
                                      CloseIconClicked="(() => closeAlert(AlertDestination.CreateShipSuccess))">
                                @Localization["ShipFormPage_SuccessAlert"]
                            </MudAlert>
                        }
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
                                   @onclick="shipSave">
                            @Localization["ShipFormPage_CreateButton"]
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>

@code {
    private MudForm form;
    private List<ShipTypeDto> _shipTypes { get; set; } = new List<ShipTypeDto>();
    private ShipForm _shipForm { get; set; } = new ShipForm();
    private bool _createShipErrorAlertVisibile = false;
    private bool _createShipSuccessAlertVisibile = false;
    private string _createShipError = "";
    private Guid? _lastCreatedShipId = null;

    private async Task closeAlert(AlertDestination alertDirection)
    {
        switch (alertDirection)
        {
            case AlertDestination.CreateShipError:
                _createShipError = "";
                _createShipErrorAlertVisibile = false;
                break;
            case AlertDestination.CreateShipSuccess:
                _createShipSuccessAlertVisibile = false;
                break;
        }
    }

    private void toShipPage() => NavManager.NavigateTo((string.Format("{0}/{1}",
        PageNavigateConstants.ShipPage,
        _lastCreatedShipId.Value)));

    private async Task shipSave()
    {
        try
        {
            form.Validate();

            if (!form.IsValid)
            {
                return;
            }

            var token = await LocalStorageService.GetAsync<string>(SavedDataSections.Token);

            Client.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);

            var response = await Client.PostAsJsonAsync(ApiRoutes.Ship.Controller, new ShipDataDto()
            {
                DisplayName = _shipForm.DisplayName,
                ShipTypeId = _shipForm.ShipTypeId
            });

            if (response.IsSuccessStatusCode)
            {
                _createShipError = "";
                _createShipSuccessAlertVisibile = true;
                _createShipErrorAlertVisibile = false;
            }
            else
            {
                _createShipError = await response.Content.ReadAsStringAsync();
                _createShipSuccessAlertVisibile = false;
                _createShipErrorAlertVisibile = true;
            }

            _lastCreatedShipId = (await response.Content.ReadFromJsonAsync<ShipDataDto>()).Id;
        }
        catch (Exception e)
        {
            var parameters = new DialogParameters();
            var options = new DialogOptions { CloseOnEscapeKey = true };
            parameters.Add("Error", e.Message);

            await (await DialogService.ShowAsync<ErrorDialog>(
                Localization["GlobalErrorHandling_ErrorDialog_Title"],
                parameters, options)).Result;
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            LocalizationService.CultureChanged += UpdatePage;
            CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
            CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

            var token = await LocalStorageService.GetAsync<string>(SavedDataSections.Token);
            _shipTypes = await LocalStorageService.GetAsync<List<ShipTypeDto>>(SavedDataSections.ShipTypes) 
                         ?? new List<ShipTypeDto>();

            if (string.IsNullOrEmpty(token))
            {
                NavManager.NavigateTo(PageNavigateConstants.IndexPage);
            }

            Client.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);

            var response = await Client.GetAsync(ApiRoutes.Account.Controller);

            var userDto = await response.Content.ReadFromJsonAsync<UserDto>();

            if (userDto == null)
            {
                await LocalStorageService.RemoveAsync(SavedDataSections.Token);
                NavManager.NavigateTo(PageNavigateConstants.IndexPage);
            }

            response = await Client.GetAsync(ApiRoutes.ShipType.Controller);

            if (response.IsSuccessStatusCode)
            {
                _shipTypes = await response.Content.ReadFromJsonAsync<List<ShipTypeDto>>();
                await LocalStorageService.SetAsync(SavedDataSections.ShipTypes, _shipTypes);
            }
        }
        catch (Exception e)
        {
            var parameters = new DialogParameters();
            var options = new DialogOptions { CloseOnEscapeKey = true };
            parameters.Add("Error", e.Message);

            await (await DialogService.ShowAsync<ErrorDialog>(
                Localization["GlobalErrorHandling_ErrorDialog_Title"],
                parameters, options)).Result;
        }
    }

    private void UpdatePage()
    {
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        StateHasChanged();
    }

}