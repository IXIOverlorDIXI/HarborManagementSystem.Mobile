@page "/StatisticsPage/{Id}"
@using System.Globalization
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using IoC.Constants
@using Domain.Dtos
@using Microsoft.Extensions.Localization
@using UI.Services
@inject LocalizationService LocalizationService
@inject IStringLocalizer<Localizations.Localization> Localization
@inject NavigationManager NavManager
@inject HttpClient Client
@inject IStorageService LocalStorageService
@inject IDialogService DialogService

<MudContainer>
    <MudGrid JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Height="100%"
             Class="d-flex flex-column">
        <MudExpansionPanels Elevation="1" Class="mt-6">
            @if (_relativePositionMeteringData.Any())
            {
                <RelativePositionMeteringChartsComponent
                    RelativePositionMeteringData="@_relativePositionMeteringData"/>
            }
            else
            {
                <MudExpansionPanel Text="@Localization["StatisticsPage_RelativePositionComponent_Title"]">
                    <MudText Typo="Typo.h5" Align="Align.Start">
                        @Localization["StatisticsPage_RelativePositionComponent_EmptyData"]
                    </MudText>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
        <MudExpansionPanels Elevation="1" Class="mt-6">
            @if (_environmentalConditionData.Any())
            {
                <EnvironmentalConditionChartsComponent
                    EnvironmentalConditionData="@_environmentalConditionData"/>
            }
            else
            {
                <MudExpansionPanel Text="@Localization["StatisticsPage_EnvironmentalCondition_Title"]">
                    <MudText Typo="Typo.h5" Align="Align.Start">
                        @Localization["StatisticsPage_EnvironmentalConditionComponent_EmptyData"]
                    </MudText>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
        <MudExpansionPanels Elevation="1" Class="mt-6">
            @if (_storageEnvironmentalConditionData.Any())
            {
                <StorageEnvironmentalConditionChartsComponent
                    StorageEnvironmentalConditionData="@_storageEnvironmentalConditionData"/>
            }
            else
            {
                <MudExpansionPanel Text="@Localization["StatisticsPage_StorageEnvironmentalCondition_Title"]">
                    <MudText Typo="Typo.h5" Align="Align.Start">
                        @Localization["StatisticsPage_StorageEnvironmentalConditionComponent_EmptyData"]
                    </MudText>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>

    </MudGrid>
</MudContainer>


@code {

    [Parameter]
    public string Id { get; set; }

    private List<RelativePositionMeteringDto> _relativePositionMeteringData { get; set; }
        = new List<RelativePositionMeteringDto>();

    private List<StorageEnvironmentalConditionDto> _storageEnvironmentalConditionData { get; set; }
        = new List<StorageEnvironmentalConditionDto>();

    private List<EnvironmentalConditionDto> _environmentalConditionData { get; set; }
        = new List<EnvironmentalConditionDto>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            LocalizationService.CultureChanged += UpdatePage;
            CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
            CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

            _relativePositionMeteringData = await LocalStorageService
                .GetAsync<List<RelativePositionMeteringDto>>(SavedDataSections.RelativePositionMeteringData + "-" + Id)
                                            ?? new List<RelativePositionMeteringDto>();
            
            _storageEnvironmentalConditionData = await LocalStorageService
                .GetAsync<List<StorageEnvironmentalConditionDto>>(SavedDataSections.StorageEnvironmentalConditionData + "-" + Id)
                                            ?? new List<StorageEnvironmentalConditionDto>();
            
            _environmentalConditionData = await LocalStorageService
                .GetAsync<List<EnvironmentalConditionDto>>(SavedDataSections.EnvironmentalConditionData + "-" + Id)
                                            ?? new List<EnvironmentalConditionDto>();

            var token = await LocalStorageService.GetAsync<string>(SavedDataSections.Token);

            if (string.IsNullOrEmpty(token))
            {
                NavManager.NavigateTo(PageNavigateConstants.IndexPage);
            }

            Client.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);

            var response = await Client.GetAsync(string.Format("{0}?id={1}", ApiRoutes.RelativePositionMetering.Controller, Id));

            if (response.IsSuccessStatusCode)
            {
                _relativePositionMeteringData = await response.Content.ReadFromJsonAsync<List<RelativePositionMeteringDto>>();
                await LocalStorageService.SetAsync(SavedDataSections.RelativePositionMeteringData + "-" + Id, _relativePositionMeteringData);
            }

            response = await Client.GetAsync(string.Format("{0}?id={1}", ApiRoutes.EnvironmentalCondition.Controller, Id));
            
            if (response.IsSuccessStatusCode)
            {
                _environmentalConditionData = await response.Content.ReadFromJsonAsync<List<EnvironmentalConditionDto>>();
                await LocalStorageService.SetAsync(SavedDataSections.EnvironmentalConditionData + "-" + Id, _environmentalConditionData);
            }

            response = await Client.GetAsync(string.Format("{0}?id={1}", ApiRoutes.StorageEnvironmentalCondition.Controller, Id));
            
            if (response.IsSuccessStatusCode)
            {
                _storageEnvironmentalConditionData = await response.Content.ReadFromJsonAsync<List<StorageEnvironmentalConditionDto>>();
                await LocalStorageService.SetAsync(SavedDataSections.StorageEnvironmentalConditionData + "-" + Id, _storageEnvironmentalConditionData);
            }
        }
        catch (Exception e)
        {
            var parameters = new DialogParameters();
            var options = new DialogOptions { CloseOnEscapeKey = true };
            parameters.Add("Error", e.Message);

            await (await DialogService.ShowAsync<ErrorDialog>(
                Localization["GlobalErrorHandling_ErrorDialog_Title"],
                parameters, options)).Result;
        }
        StateHasChanged();
    }

    private void UpdatePage()
    {
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        StateHasChanged();
    }

}